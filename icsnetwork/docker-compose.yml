version: '3.10'
services:
  app: &app-template
    container_name: main_backend
    image: icsnetwork-backend:latest
    build: .
    pull_policy: if_not_present
    ports:
      - "${APP_PORT:-8081}:8080"
    command: >
      java -jar ./target/icsnetwork-0.0.1-SNAPSHOT.jar --debug
        --spring.datasource.url=jdbc:postgresql://postgres:5432/postgres
        --spring.datasource.username=postgres
        --spring.datasource.password=password
        --spring.datasource.driver-class-name=org.postgresql.Driver
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy

  app2:
    <<: *app-template
    container_name: aux1_backend
    command: >
      java -jar ./target/icsnetwork-0.0.1-SNAPSHOT.jar --debug
        --spring.datasource.url=jdbc:postgresql://postgres:5432/postgres
        --spring.datasource.username=postgres
        --spring.datasource.password=password
        --spring.datasource.driver-class-name=org.postgresql.Driver
    ports:
      - "8082:8080"
    depends_on:
      - app

  app3:
    <<: *app-template
    container_name: aux2_backend
    command: >
      java -jar ./target/icsnetwork-0.0.1-SNAPSHOT.jar --debug
        --spring.datasource.url=jdbc:postgresql://postgres:5432/postgres
        --spring.datasource.username=postgres
        --spring.datasource.password=password
        --spring.datasource.driver-class-name=org.postgresql.Driver
    ports:
      - "8083:8080"
    depends_on:
      - app2
  
  mirror:
    <<: *app-template
    container_name: mirror
    ports:
      - "8084:8080"
    command: >
      java -jar ./target/icsnetwork-0.0.1-SNAPSHOT.jar --debug
        --spring.datasource.url=jdbc:postgresql://pg-replica:5432/replicator
        --spring.datasource.username=replicator
        --spring.datasource.password=replicator
        --spring.datasource.driver-class-name=org.postgresql.Driver
    depends_on:
      pg-replica:
        condition: service_healthy

  postgres:
    container_name: postgres_container
    image: postgres:16
    user: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - ./db/schema:/docker-entrypoint-initdb.d:ro
      - postgres:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: "pg_isready -U postgres -d postgres"
      interval: 3s
      timeout: 20s
      retries: 5

  pg-replica:
    container_name: pg-replica_container
    image: postgres:16
    user: postgres
    environment:
      POSTGRES_USER: replicator
      POSTGRES_PASSWORD: replicator
    volumes:
      - ./db/schema:/docker-entrypoint-initdb.d:ro
      - pg-replica:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: "pg_isready -U replicator -d postgres"
      interval: 3s
      timeout: 20s
      retries: 5
    depends_on:
      postgres:
        condition: service_healthy

  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    restart: unless-stopped
  
  frontend:
    container_name: frontend
    build: ./frontend
    ports:
      - "3000:3000"
    restart: unless-stopped
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:3000/manage/health || exit 1
      interval: 5s
      retries: 25
      start_period: 5s
      timeout: 60s

  nginx:
    container_name: nginx
    image: byjg/nginx-extras
    ports:
      - "${NGINX_PORT:-8080}:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/static:/var/www/static:ro
      - ./nginx/logs:/var/log/nginx
    restart: unless-stopped
    depends_on:
      app:
        condition: service_healthy
      app2:
        condition: service_healthy
      app3:
        condition: service_healthy
      mirror:
        condition: service_healthy
      frontend:
        condition: service_healthy

volumes:
  postgres:
  pg-replica:
  pgadmin:
